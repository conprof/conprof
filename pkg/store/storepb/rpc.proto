syntax = "proto3";
package conprof;

import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "github.com/thanos-io/thanos/pkg/store/labelpb/types.proto";

option go_package = "storepb";

option (gogoproto.sizer_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_getters_all) = false;

// Do not generate XXX fields to reduce memory footprint and opening a door
// for zero-copy casts to/from prometheus data types.
option (gogoproto.goproto_unkeyed_all) = false;
option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_sizecache_all) = false;

// WritableProfileStore represents API against instance that allows writing profiles to.
service WritableProfileStore {
  rpc Write(WriteRequest) returns (WriteResponse) {}
}

// SymbolStore represents an API that can be asked which symbols exist and upload symbols.
service SymbolStore {
  rpc Exists(SymbolExistsRequest) returns (SymbolExistsResponse) {}
  rpc Upload(stream SymbolUploadRequest) returns (SymbolUploadResponse) {}
}

// ReadableProfileStore represents API against instance that allows reading profiles from.
service ReadableProfileStore {
  /// Series streams each Series (Labels and chunk/downsampling chunk) for given label matchers and time range.
  ///
  /// Series should strictly stream full series after series, optionally split by time. This means that a single frame can contain
  /// partition of the single series, but once a new series is started to be streamed it means that no more data will
  /// be sent for previous one.
  /// Series has to be sorted.
  ///
  /// There is no requirements on chunk sorting, however it is recommended to have chunk sorted by chunk min time.
  /// This heavily optimizes the resource usage on Querier / Federated Queries.
  rpc Series(SeriesRequest) returns (stream SeriesResponse);

  /// Profile returns the raw bytes of the profile requested with an exact label match and exact timestamp.
  rpc Profile(ProfileRequest) returns (ProfileResponse);

  /// LabelNames returns all label names that are available.
  rpc LabelNames(LabelNamesRequest) returns (LabelNamesResponse);

  /// LabelValues returns all label values for given label name.
  rpc LabelValues(LabelValuesRequest) returns (LabelValuesResponse);
}

message WriteResponse {
}

message WriteRequest {
  repeated ProfileSeries profileSeries = 1 [(gogoproto.nullable) = false];
  string tenant = 2;
}

// ProfileSeries represents samples and labels for a single time series.
message ProfileSeries {
  repeated thanos.Label labels = 1 [(gogoproto.nullable) = false, (gogoproto.customtype) = "github.com/thanos-io/thanos/pkg/store/labelpb.Label"];
  repeated Sample samples = 2 [(gogoproto.nullable) = false];
}

message Sample {
  bytes value    = 1;
  int64 timestamp = 2;
}

message SelectHints {
  int64 start = 1;
  int64 end   = 2;
  string func = 3;
}

message SeriesRequest {
  int64 min_time                 = 1;
  int64 max_time                 = 2;
  repeated LabelMatcher matchers = 3 [(gogoproto.nullable) = false];
  bool skip_chunks               = 4;
  SelectHints select_hints       = 5;
}

// Matcher specifies a rule, which can match or set of labels or not.
message LabelMatcher {
  enum Type {
      EQ  = 0; // =
      NEQ = 1; // !=
      RE  = 2; // =~
      NRE = 3; // !~
    }
  Type type    = 1;
  string name  = 2;
  string value = 3;
}

message AggrChunk {
  int64 min_time = 1;
  int64 max_time = 2;

  Chunk raw     = 3;
}

message Chunk {
  enum Encoding {
      XOR = 0;
      None = 1;
    }
  Encoding type  = 1;
  bytes data     = 2;
}

message RawProfileSeries {
  repeated thanos.Label labels = 1 [(gogoproto.nullable) = false, (gogoproto.customtype) = "github.com/thanos-io/thanos/pkg/store/labelpb.Label"];
  repeated AggrChunk chunks = 2 [(gogoproto.nullable) = false];
}

message SeriesResponse {
  oneof result {
      /// series contains 1 response series. The series labels are sorted by name.
      RawProfileSeries series = 1;

      /// warning is considered an information piece in place of series for warning purposes.
      /// It is used to warn store API user about suspicious cases or partial response (if enabled).
      string warning = 2;
  }
}

message ProfileRequest {
  int64 timestamp = 1;
  repeated LabelMatcher matchers = 2 [(gogoproto.nullable) = false];
}

message ProfileResponse {
  bytes data = 1;
}

message LabelNamesRequest {
  int64 start = 1;
  int64 end = 2;
}

message LabelNamesResponse {
  repeated string names    = 1;
  repeated string warnings = 2;
}

message LabelValuesRequest {
  string label = 1;
  int64 start = 2;
  int64 end = 3;
}

message LabelValuesResponse {
  repeated string values   = 1;
  repeated string warnings = 2;
}

message SymbolExistsRequest {
  string id = 1;
}

message SymbolExistsResponse {
  bool exists = 1;
}

message SymbolUploadRequest {
  oneof data {
    SymbolUploadInfo info = 1;
    bytes chunk_data = 2;
  }
}

message SymbolUploadInfo {
  string id = 1;
}

message SymbolUploadResponse {
  string id = 1;
  uint64 size = 2;
}
